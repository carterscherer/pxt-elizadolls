<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="a%~](b2tzBxQ2Trq|V_B" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="XWm(E_Z-nJ#=_,U=mB)m" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ElizaDolls {" line1="" line2="    // In case it gets lost from above (// then %) " line3="    //  % color=&quot;#FE99F8&quot;" line4="" line5="    let pulseMinLocal = 1024;" line6="    let pulseMaxLocal = 0;" line7="    let pulseLocal = 0;" line8="    let pulseMotion = 0.01;" line9="" line10="    //% block=&quot;read pulse&quot;" line11="    //% group=&quot;Pulse&quot;" line12="    export function pulseSensor( ) : number {" line13="" line14="        pulseLocal = pins.analogReadPin( AnalogPin.P1 );" line15="" line16="        pulseMinLocal += ( 1024 - pulseMinLocal ) * pulseMotion;" line17="        if (pulseLocal &lt; pulseMinLocal )" line18="            pulseMinLocal = pulseLocal;" line19="" line20="        pulseMaxLocal -= pulseMaxLocal * pulseMotion;" line21="        if (pulseLocal &gt; pulseMaxLocal)" line22="            pulseMaxLocal = pulseLocal;" line23="" line24="        let range = pulseMaxLocal - pulseMinLocal;" line25="" line26="        let output = 0;" line27="" line28="        if ( range &gt; 0 ) {" line29="            if ( ( pulseLocal - pulseMinLocal ) &gt; range / 2 )" line30="                output = 1;" line31="        }" line32="" line33="        return pulseLocal;" line34="    }" line35="" line36="    //% block=&quot;read pulse local&quot;" line37="    //% group=&quot;Pulse&quot;" line38="    export function pulseSensorLocal(): number { return pulseLocal; }" line39="" line40="    //% block=&quot;read pulse max&quot;" line41="    //% group=&quot;Pulse&quot;" line42="    export function pulseSensorRangeMax(): number { return pulseMaxLocal; }" line43="" line44="    //% block=&quot;read pulse min&quot;" line45="    //% group=&quot;Pulse&quot;" line46="    export function pulseSensorRangeMin(): number { return pulseMinLocal; }" line47="" line48="    // For all LED functions" line49="    // Packing into number:  ( r &lt;&lt; 16 ) | (g &lt;&lt; 8 ) | b" line50="    // Sending to ws2812   ---b---g---r---&gt;" line51="    // Added some text to pxt.json to disable BT " line52="    // this helps with console output!" line53="" line54="    //% block=&quot;set Left Earring, Right Earring, Necklace $leftEar | $rightEar | $necklace&quot;" line55="    //% group=&quot;Accessories&quot;" line56="    //% leftEar.shadow=&quot;colorNumberPicker&quot;" line57="    //% rightEar.shadow=&quot;colorNumberPicker&quot;" line58="    //% necklace.shadow=&quot;colorNumberPicker&quot;" line59="    export function ledAccessories(leftEar: number, rightEar: number, necklace: number ) {" line60="        let e = pins.createBuffer(13 * 3)" line61="        let offset = 0;" line62="" line63="        // Left Ear" line64="" line65="        let rColor = (leftEar &gt;&gt; 16) &amp; 0xFF;" line66="        let gColor = (leftEar &gt;&gt; 8) &amp; 0xFF;" line67="        let bColor = (leftEar &gt;&gt; 0) &amp; 0xFF;" line68="" line69="        e[offset + 0] = gColor;" line70="        e[offset + 1] = rColor;" line71="        e[offset + 2] = bColor;" line72="" line73="        // Right Ear" line74="" line75="        offset += 3;" line76="" line77="        rColor = (rightEar &gt;&gt; 16) &amp; 0xFF;" line78="        gColor = (rightEar &gt;&gt; 8) &amp; 0xFF;" line79="        bColor = (rightEar &gt;&gt; 0) &amp; 0xFF;" line80="" line81="        e[offset + 0] = gColor;" line82="        e[offset + 1] = rColor;" line83="        e[offset + 2] = bColor;" line84="" line85="        // Necklace" line86="" line87="        for ( let i = 0; i &lt; 11; i++ ) { " line88="            offset += 3;" line89="" line90="            rColor = (necklace &gt;&gt; 16) &amp; 0xFF;" line91="            gColor = (necklace &gt;&gt; 8) &amp; 0xFF;" line92="            bColor = (necklace &gt;&gt; 0) &amp; 0xFF;" line93="" line94="            e[offset + 0] = gColor;" line95="            e[offset + 1] = rColor;" line96="            e[offset + 2] = bColor;" line97="        }" line98="        " line99="        // Zip all the colors out" line100="" line101="        ws2812b.sendBuffer(e, DigitalPin.P16);" line102="    }" line103="" line104="" line105="    //% block=&quot;set ring led $cv&quot;" line106="    //% group=&quot;Ring&quot;" line107="    //% cv.shadow=&quot;colorNumberPicker&quot;" line108="    export function ringDirect(cv: number) {" line109="        let f = pins.createBuffer(25 * 3)" line110="" line111="        let rColor2 = (cv &gt;&gt; 16) &amp; 0xFF;" line112="        let gColor2 = (cv &gt;&gt; 8) &amp; 0xFF;" line113="        let bColor2 = (cv &gt;&gt; 0) &amp; 0xFF;" line114="" line115="        for (let j = 0; j &lt; 25; j++) {" line116="            f[j * 3 + 0] = gColor2;" line117="            f[j * 3 + 1] = rColor2;" line118="            f[j * 3 + 2] = bColor2;" line119="        }" line120="        // ws2812b.setBufferMode(DigitalPin.P8, ws2812b.BUFFER_MODE_RGB );" line121="        ws2812b.sendBuffer(f, DigitalPin.P8);" line122="    }" line123="" line124="    //% block" line125="    //% group=&quot;Distance&quot;" line126="    export function distance(): number {" line127="        let trig = DigitalPin.P1;" line128="        let echo = DigitalPin.P2;" line129="        let maxCMDistance = 100 * 58;" line130="" line131="        pins.setPull(trig, PinPullMode.PullNone);" line132="        pins.digitalWritePin(trig, 0);" line133="        control.waitMicros(2);" line134="        pins.digitalWritePin(trig, 1);" line135="        control.waitMicros(10);" line136="        pins.digitalWritePin(trig, 0);" line137="" line138="        // read pulse" line139="        const d = pins.pulseIn(echo, PulseValue.High, maxCMDistance);" line140="" line141="        return Math.idiv(d, 58);" line142="    }" line143="" line144="    // " line145="" line146="    let colorSensorConfigured: boolean = false;" line147="    let colorSensorAddress: number = 0x39;" line148="    let colorSensorEnableRegister: number = 0x80;" line149="    let colorSensorATimeRegister: number = 0x81;" line150="    let colorSensorWTimeRegister: number = 0x83;" line151="    let colorSensorPersRegister: number = 0x8C;" line152="    let colorSensorAGainRegister: number = 0x8F;" line153="    let colorSensorIdRegister: number = 0x92;" line154="    let colorSensorStatusRegister: number = 0x93;" line155="    let colorSensorRedRegister: number = 0x96;" line156="    let colorSensorGreenRegister: number = 0x98;" line157="    let colorSensorBlueRegister: number = 0x9A;" line158="" line159="    let colorSensorId: number = 0x90;" line160="" line161="    //% block" line162="    //% group=&quot;ColorSensor&quot;" line163="    export function checkColorSensor(): boolean {" line164="        let id3 = i2cReadRegister8(colorSensorAddress, colorSensorIdRegister);" line165="        // basic.showNumber( id )" line166="        return (id3 == colorSensorId)" line167="    }" line168="" line169="    export function colorSensorReadId(): number {" line170="        let id32 = i2cReadRegister8(colorSensorAddress, colorSensorIdRegister);" line171="        // basic.showNumber( id )" line172="        return id32;" line173="    }" line174="" line175="    export function colorSensorReadStatus(): number {" line176="        let status = i2cReadRegister8(colorSensorAddress, colorSensorStatusRegister);" line177="        // basic.showNumber( id )" line178="        return status;" line179="    }" line180="" line181="    export function colorSensorReadEnable(): number {" line182="        let status2 = i2cReadRegister8(colorSensorAddress, colorSensorEnableRegister);" line183="        // basic.showNumber( id )" line184="        return status2;" line185="    }" line186="" line187="    //% block" line188="    //% group=&quot;ColorSensor&quot;" line189="    export function colorSensorRead(): number {" line190="        let rSense: number = 0;" line191="        let bSense: number = 0;" line192="        let gSense: number = 0;" line193="" line194="        colorSensorConfigure();" line195="" line196="        if (colorSensorConfigured) {" line197="            rSense = i2cReadRegister16(colorSensorAddress, colorSensorRedRegister);" line198="            gSense = i2cReadRegister16(colorSensorAddress, colorSensorGreenRegister);" line199="            bSense = i2cReadRegister16(colorSensorAddress, colorSensorBlueRegister);" line200="        }" line201="" line202="" line203="        let rColor22 = (rSense &gt;&gt; 8) &amp; 0xFF;" line204="        let gColor22 = (gSense &gt;&gt; 8) &amp; 0xFF;" line205="        let bColor22 = (bSense &gt;&gt; 8) &amp; 0xFF;" line206="" line207="        rColor22 = Math.pow(rColor22, 2.5);" line208="        gColor22 = Math.pow(gColor22, 2.5);" line209="        bColor22 = Math.pow(bColor22, 2.5);" line210="" line211="        let cMax = (rColor22 &gt; gColor22) ? rColor22 : gColor22;" line212="        cMax = (bColor22 &gt; cMax) ? bColor22 : cMax;" line213="" line214="        rColor22 = 16 * rColor22 / cMax;" line215="        gColor22 = 16 * gColor22 / cMax;" line216="        bColor22 = 16 * bColor22 / cMax;" line217="" line218="        // basic.showNumber( rColor &gt;&gt; 4 );" line219="" line220="        return (rColor22 &lt;&lt; 16) | (gColor22 &lt;&lt; 8) | bColor22;" line221="        // return (rSense &lt;&lt; 16) | (gSense &lt;&lt; 8) | bSense;" line222="" line223="" line224="        // return rSense + gSense + bSense;" line225="" line226="    }" line227="" line228="    //% block" line229="    //% group=&quot;ColorSensor&quot;" line230="    export function colorGetRed(color: number): number {" line231="        return (color &gt;&gt; 16) &amp; 0xFF;" line232="    }" line233="" line234="    //% block" line235="    //% group=&quot;ColorSensor&quot;" line236="    export function colorGetGreen(color: number): number {" line237="        return (color &gt;&gt; 8) &amp; 0xFF;" line238="    }" line239="" line240="    //% block" line241="    //% group=&quot;ColorSensor&quot;" line242="    export function colorGetBlue(color: number): number {" line243="        return (color &amp; 0xFF);" line244="    }" line245="" line246="" line247="    function colorSensorConfigure() {" line248="        if (!colorSensorConfigured &amp;&amp; checkColorSensor()) {" line249="            // turn it on" line250="            // Control Reg:  PON" line251="            i2cWriteRegister(colorSensorAddress, colorSensorEnableRegister, 0x01)" line252="" line253="            basic.pause(100)" line254="" line255="            // ATime  :RGB TIMING:FF 2.4ms, C0 150ms" line256="            i2cWriteRegister(colorSensorAddress, colorSensorATimeRegister, 0xC0)" line257="            // Wait Time:FF 2.4ms" line258="            i2cWriteRegister(colorSensorAddress, colorSensorWTimeRegister, 0xFF)" line259="            // Persistance: 0x00 - IRQ every time" line260="            i2cWriteRegister(colorSensorAddress, colorSensorPersRegister, 0)" line261="            // AGain: 0 - 3" line262="            i2cWriteRegister(colorSensorAddress, colorSensorAGainRegister, 3)" line263="" line264="            // Control Reg:  PON AEN" line265="            i2cWriteRegister(colorSensorAddress, colorSensorEnableRegister, 0x08 | 0x03)" line266="            basic.pause(100)" line267="" line268="" line269="            //            basic.showString( &quot;C&quot;);" line270="            colorSensorConfigured = true;" line271="        }" line272="    }" line273="" line274="    export function i2cReadRegister8(address: number, register: number): number {" line275="        pins.i2cWriteNumber(" line276="            address," line277="            register," line278="            NumberFormat.UInt8LE," line279="            true" line280="        )" line281="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line282="    }" line283="" line284="    export function i2cReadRegister16(address: number, register: number): number {" line285="        pins.i2cWriteNumber(" line286="            address," line287="            register," line288="            NumberFormat.UInt8LE," line289="            true" line290="        )" line291="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line292="    }" line293="" line294="    export function i2cWriteRegister8_8(address: number, register: number, value: number) {" line295="        pins.i2cWriteNumber(" line296="            address," line297="            register," line298="            NumberFormat.UInt8LE," line299="            true" line300="        )" line301="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line302="    }" line303="" line304="    export function i2cWriteRegister(address: number, register: number, value: number) {" line305="        pins.i2cWriteNumber(" line306="            address," line307="            register | (value &lt;&lt; 8)," line308="            NumberFormat.UInt16LE," line309="            false" line310="        )" line311="        // pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line312="    }" line313="" line314="}" numlines="315"></mutation></block></statement></block></xml>